import {
	Box,
	Grid,
	NoSsr,
	alpha,
	useMediaQuery,
	useTheme,
} from "@mui/material";
import dynamic from "next/dynamic";
import React, { useEffect, useState } from "react";
import { useTranslation } from "react-i18next";
import Slider from "react-slick";

import {
	CustomBoxFullWidth,
	CustomStackFullWidth,
	SliderCustom,
} from "../../../styled-components/CustomStyles.style";
import CustomImageContainer from "../../CustomImageContainer";
import CustomContainer from "../../container";
import iconicBg from "../assets/hero_background.png";
import HeroLocationForm from "./HeroLocationForm";
import HeroTitleSection from "./HeroTitleSection";

const DynamicModuleSelection = dynamic(() =>
	import("./module-selection/ModuleSelectionRaw")
);
const HeroSection = ({ configData, landingPageData, handleOrderNow,isSmall }) => {
	const theme = useTheme();
	const isXSmall = useMediaQuery(theme.breakpoints.down("sm"));
	const { t } = useTranslation();
	const [currentLocation, setCurrentLocation] = useState(null);
	const [currentIndex, setCurrentIndex] = useState(0);
	const banners = landingPageData?.promotion_banners;
	const category6Banners = banners.filter(item => item.category === 'Category 6');

	useEffect(() => {
		if (typeof window !== "undefined") {
			setCurrentLocation(window.localStorage.getItem("location"));
		}
	}, []);
  // Function to generate the background image URL dynamically
  const getBackgroundImageUrl = (banner) => {
    return `${landingPageData?.base_urls?.promotion_banners_url}/${banner.img}`;
  };

  // Filtered banners based on category
  const filteredBanners = landingPageData?.promotion_banners?.filter(
    (item) => item.category === "Category 6"
  );
  const infiniteManage = () => {
	if (isSmall) {
		if (landingPageData?.promotion_banners?.length === 1) {
			return false;
		} else {
			return true;
		}
	} else {
		if (landingPageData?.promotion_banners?.length > 3) {
			return true;
		} else {
			return false;
		}
	}
};
const twoItemManage = () => {
	return (
		<CustomBoxFullWidth>
			<Grid container spacing={2}>
				{landingPageData?.promotion_banners?.map((item, index) => {
					return (
						<Grid
							key={index}
							item
							sm={6}
							md={6}
							align={index === 0 ? "right" : "left"}
						>
							<Box
								sx={{
									border: (theme) =>
										`0.828571px solid ${alpha(
											theme.palette.primary.main,
											0.15
										)}`,
									position: "relative",
									height: "175px",
									width: { sm: "100%", md: "395px" },
									borderRadius: "5px",
									overflow: "hidden",
									"&:hover": {
										img: {
											transform: "scale(1.1)",
										},
									},
								}}
							>
								<CustomImageContainer
									src={`${landingPageData?.base_urls?.promotional_banner_url}/${item.img}`}
									alt="banners"
									height="100%"
									width="100%"
									obejctfit="contain"
									borderRadius="5px"
								/>
							</Box>
						</Grid>
					);
				})}
			</Grid>
		</CustomBoxFullWidth>
	);
};
const slidesToShowManage = () => {
	if (isSmall) {
		return 1;
	} else {
		if (landingPageData?.promotion_banners?.length > 2) {
			return 1;
		} else if (landingPageData?.promotion_banners?.length === 2) {
			return 1;
		} else {
			return 1;
		}
	}
};
  const sliderManage = () => {
	const filteredBanners = landingPageData?.promotion_banners?.filter(item => item.category === 'Category 6');

	return (
		<SliderCustom
		sx={{
		  "& .slick-slider": {
			"& .slick-slide": {
			  padding: { xs: "5px", md: "11px" },
			},
		  },
		}}
	  >
		<Slider {...settings}>
		  {filteredBanners.map((item, index) => (
			<Box
			  key={index}
			  sx={{
				border: (theme) =>
				  `0.828571px solid ${alpha(theme.palette.primary.main, 0.15)}`,
				position: "relative",
				height: "175px",
				width: "100%",
				borderRadius: "5px",
				overflow: "hidden",
				"&:hover": {
				  img: {
					transform: "scale(1.1)",
				  },
				},
			  }}
			>
			  <CustomImageContainer
				src={`${landingPageData?.base_urls?.promotional_banner_url}/${item?.img}`}
				alt="banners"
				height="100%"
				width="100%"
				objectFit="contain"
				borderRadius="5px"
			  />
			</Box>
		  ))}
		</Slider>
	  </SliderCustom>
	);
};
const settings = {
	dots: false,
	infinite: infiniteManage(),
	slidesToShow: slidesToShowManage(),
	slidesToScroll: 1,
	autoplay: true,
	speed: 2000,
	autoplaySpeed: 3000,
	pauseOnHover: true,
	responsive: [
		{
			breakpoint: 1024,
			settings: {
				slidesToShow: 1,
				slidesToScroll: 1,
			},
		},
		{
			breakpoint: 600,
			settings: {
				slidesToShow: 1,
				slidesToScroll: 1,
				initialSlide: 1,
			},
		},
		{
			breakpoint: 480,
			settings: {
				slidesToShow: 1,
				slidesToScroll: 1,
			},
		},
	],
};

  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentIndex((prevIndex) => (prevIndex + 1) % filteredBanners.length);
    }, 5000); // Change image every 5 seconds (5000 milliseconds)
	// console.log(filteredBanners)
    return () => clearInterval(interval);
  }, [filteredBanners]);
	return (
		<CustomContainer>
			<CustomBoxFullWidth
				sx={{
					
					marginTop: { xs: "4rem", sm: "5rem", md: "7rem" },
					borderRadius: "20px",
					position: "relative",
					overflow: "hidden",
					".shape img": {
						transition: "all ease-in 1s",
					},
					"&:hover": {
						".shape img": {
							transform: "scale(1.2)",
						},
					},
				}}
			>
				<Box  sx={{ position: "absolute" }} className="shape">
				{/* <CustomImageContainer
						src={sliderManage(category6Banners)}
						alt={t("Background")}
						height="100%"
						width="100%"
						borderRadius="20px"
						objectFit="cover"
					/> */}
				</Box>
				{sliderManage(category6Banners)}

				<Grid container>
					<Grid
						item
						xs={8}
						md={7}
						sx={{ padding: { xs: "1rem", sm: "3rem" } }}
					>
						{/* <NoSsr>
							<HeroTitleSection
								configData={configData}
								landingPageData={landingPageData}
								handleOrderNow={handleOrderNow}
							/>
						</NoSsr> */}
					</Grid>
					{/* <Grid item xs={4} md={5} align="right">
						<CustomStackFullWidth
							height="100%"
							alignItems="flex-start"
							justifyContent="flex-end"
						>
							<Box
								sx={{
									height: { xs: "125px", sm: "300px", md: "400px" },
									width: { xs: "70px", sm: "200px", md: "235px" },
									borderTopLeftRadius: "16px",
									borderTopRightRadius: "16px",
									position: "relative",
									zIndex: "99",
									// border: (theme) =>
									// 	`1px solid ${alpha(
									// 		theme.palette.primary.main,
									// 		0.2
									// 	)}`,
									// backgroundColor: (theme) =>
									// 	theme.palette.neutral[100],
									backgroundColor: 'white',
									marginInline: "auto",
								}}
							>
								<CustomImageContainer
									src={`${landingPageData?.base_urls?.header_banner_url}/${landingPageData?.header_banner}`}
									alt={t("Banner")}
									height="100%"
									width="100%"
									objectFit="cover"
								/>
							</Box>
							<Box
								sx={{
									position: "absolute",
									height: { xs: "52px", sm: "100px", md: "140px" },
									width: { xs: "52px", sm: "100px", md: "150px" },
									bottom: 0,
									right: { xs: 7, sm: 25, md: 30 },
								}}
							>
								<CustomImageContainer
									src={`${landingPageData?.base_urls?.header_icon_url}/${landingPageData?.header_icon}`}
									alt={t("icon")}
									height="100%"
									width="100%"
									objectFit="cover"
								/>
							</Box>
						</CustomStackFullWidth>
					</Grid> */}
				</Grid>
			</CustomBoxFullWidth>
			{isXSmall && (
				<>
					{currentLocation ? (
						<h1></h1>
						// <DynamicModuleSelection isSmall />
					) : (
						<CustomStackFullWidth mt="10px">
							<HeroLocationForm />
						</CustomStackFullWidth>
					)}
				</>
			)}
		</CustomContainer>
	);
};

export default HeroSection;
